apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: kube-system
data:
  kube-conf: |
   <source>
     @type tail
     @id in_tail_container_logs
     path /var/log/containers/*.log
     exclude_path ["/var/log/containers/fluentd*"]
     pos_file /var/log/fluentd-containers.log.pos
     tag raw.kubernetes.*
     read_from_head true
     <parse>
       @type "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
       time_format %Y-%m-%dT%H:%M:%S.%NZ
     </parse>
   </source>


  elasticsearch-conf: |
   <match fluent.**>
     @type null
   </match>

   # -------------------------------------------------------
   # Add Kubernetes metadata
   # -------------------------------------------------------


   <filter kubernetes.**>
      @type kubernetes_metadata
      @log_level info

      @type grep
      <regexp>
        key $.kubernetes.labels.istio 
        pattern my-ingress-gateway
      </regexp>
      <regexp>
        key $.kubernetes.labels.app
        pattern ^(.+)$
      </regexp>
   </filter>

   <filter kubernetes.var.log.containers.**>
    @type parser
    <parse>
      @type json
      json_parser json
    </parse>
    replace_invalid_sequence true
    emit_invalid_record_to_error false
    key_name log
    reserve_data true
   </filter>     

   <match kubernetes.var.log.containers.**>>
      @type elasticsearch
      @id out_es_nginx_ingress
      @log_level info
      host "#{ENV['FLUENT_ELASTICSEARCH_HOST']}"
      port "#{ENV['FLUENT_ELASTICSEARCH_PORT']}"
      scheme "#{ENV['FLUENT_ELASTICSEARCH_SCHEME'] || 'http'}"
      ssl_verify "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERIFY'] || 'true'}"
      ssl_version "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERSION'] || 'TLSv1'}"
      reload_connections "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_CONNECTIONS'] || 'false'}"
      validate_client_version false
      verify_es_version_at_startup false
      reconnect_on_error "#{ENV['FLUENT_ELASTICSEARCH_RECONNECT_ON_ERROR'] || 'true'}"
      reload_on_failure "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_ON_FAILURE'] || 'true'}"
      log_es_400_reason "#{ENV['FLUENT_ELASTICSEARCH_LOG_ES_400_REASON'] || 'false'}"
      index_name "#{ENV['ELASTICSEARCH_INDEX_NGINX_INGRESS_NS'] || 'default'}"
      type_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_TYPE_NAME'] || 'fluentd'}"
      time_key @timestamp
      include_timestamp true
      <buffer>
        flush_thread_count "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_THREAD_COUNT'] || '8'}"
        flush_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_INTERVAL'] || '5s'}"
        chunk_limit_size "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_CHUNK_LIMIT_SIZE'] || '2M'}"
        queue_limit_length "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_QUEUE_LIMIT_LENGTH'] || '32'}"
        retry_max_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_RETRY_MAX_INTERVAL'] || '30'}"
        retry_forever true
      </buffer>
   </match>

   <match kubernetes.**>
      @type elasticsearch_dynamic
      @log_level info
      include_tag_key true
      host elasticsearch.logging
      port 9200
      index_name ${record['kubernetes']['labels']['app']}.${Time.at(time).getutc.strftime(@logstash_dateformat)}
      include_timestamp true
      <buffer>
        @type file
        path /var/log/fluentd-buffers/wanted.containers.buffer
        flush_mode interval
        retry_type exponential_backoff
        retry_max_times 10
        retry_wait 10s
        flush_thread_count 2
        flush_interval 30s
        chunk_limit_size 8M
        queue_limit_length 16
        overflow_action block
      </buffer>
   </match>   
 

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingress-gateway-logging
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: my-ingress-gateway
  configPatches:
    - applyTo: NETWORK_FILTER
      match:
        context: ANY
        listener:
          filterChain:
            filter:
              name: "envoy.http_connection_manager"
      patch:
        operation: MERGE
        value:
          typed_config:
            "@type": "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager"
            access_log:
              - name: envoy.file_access_log
                config:
                  path: /dev/stdout
                  json_format: 
                    protocol: "%PROTOCOL%"
                    duration: "%DURATION%"
                    method: "%REQ(:METHOD)%"
                    urlPath: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                    responseCode: "%RESPONSE_CODE%"